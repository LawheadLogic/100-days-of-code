***********************************************************;
*  SUSAN LAWHEAD                                  		  *;
*  #100 DaysOfCode Day 2		                          *;
*  Lesson #4, Preparing Data							  *;
*     									                  *;
***********************************************************;

*setting primary library;
libname pg1 '/home/u57417930/EPG1V2/data';
*setting new output library to save permanent outputs;
libname out '/home/u57417930/EPG1V2/output';

*practicing where and keep in the data statement. Had to remind myself how to use DATES in where statement;
DATA out.storm_cat5;
	set pg1.storm_summary;
	WHERE MaxWindMPH >= 156 AND StartDate >= '01JAN2000'd;
	KEEP Season Basin Name Type MaxWindMPH;
RUN;

*reviewing data from eu_occ;
proc contents data=pg1.eu_occ;
run;

*modifying data for Level 1 practice;
DATA out.eu_occ2016;
	set pg1.eu_occ;
	WHERE YearMon LIKE '2016%';
	*After looking at results, I realize I could just list the three columns and then apply the format once;
	*FORMAT Hotel Comma17. ShortStay Comma17. Camp Comma17.;
	FORMAT Hotel ShortStay Camp Comma17.;
	DROP Geo;
RUN;

*Level 2 practice;
DATA out.fox;
	set pg1.np_species;
	*WHERE Category LIKE 'Mammal' and upcase(Common_Names) LIKE upcase('%Fox%');
	WHERE Category LIKE 'Mammal' and upcase(Common_Names) LIKE upcase('%Fox%') AND upcase(Common_Names) NOT LIKE upcase('%Squirrel%');
	DROP Category Record_Status Occurrence Nativeness;
RUN;

*Adds a sort statement;
proc sort data=out.fox;
	BY Common_Names;
RUN;

*Challenge Level Practice;
%let Category= Bird;
DATA &Category;
	set pg1.np_species;
	WHERE Category = "&Category";
	DROP Abundance Seasonality Conservation_Status;
RUN;

proc freq data=&category;
	TABLE Record_Status;
RUN;

*Creating a new column;
data storm_length;
	set pg1.storm_summary;
	drop Hem_EW Hem_NS Lat Lon;
	*Add assignment statement;
	StormLength=EndDate-StartDate;
run;

*new columns with functions;
data storm_wingavg;
	set pg1.storm_range;
	*Add assignment statements;
	WindAvg=mean(wind1,wind2,wind3,wind4);
	WindRange=range(wind1,wind2,wind3,wind4);
	*learned shorthand of range(wind1-wind4);
run;

*Where statement including a substring function;
data pacific;
	set pg1.storm_summary;
	drop Type Hem_EW Hem_NS MinPressure Lat Lon;
	*Add a WHERE statement that uses the SUBSTR function;
	WHERE upcase(substr(Basin, 2, 1))='P';
run;

*Level 1 practice;
data np_summary_update;
	set pg1.np_summary;
	keep Reg ParkName DayVisits OtherLodging Acres SqMiles Camping;	
	*Add assignment statements;
	SqMiles=Acres*.0015625;
	Camping=sum(OtherCamping, TentCampers, RVCampers, BackCountryCampers);
	FORMAT SqMiles Camping Comma17.;
run;

*Level 2 Practice;
data out.eu_occ_total;
	set pg1.eu_occ;
	Year= substr(YearMon, 1, 4);
	Month=substr(YearMon, 6, 2);
	ReportDate= MDY(Month, 1, Year);
	Total=sum(camp, hotel, shortstay);
	FORMAT Hotel ShortStay Camp Total commma17. ReportDate monyy7.;
	KEEP Country Hotel ShortStay Camp ReportDate Total;
RUN;
*I started rushing on this one some and struggled, not with the concepts, but with the actual syntax such as putting Year Month Day in the reportdate column;

*Challenge Practice;
data out.np_summary2;
	set pg1.np_summary;
	ParkType=SCAN(ParkName, -1);
	KEEP Reg Type ParkName ParkType;
RUN;
*So it appears the -1 indicates the scan should go back to the first delimiter, or space, not just to the last character. Need to do more research here:

*If/Then/Else Practice- Learned that missing doesn't show up in the frequency table the same way;
data storm_cat;
	set pg1.storm_summary;
	keep Name Basin MinPressure StartDate PressureGroup;
	*add ELSE keyword and remove final condition;
	if MinPressure=. then PressureGroup=.;
	else if MinPressure<=920 then PressureGroup=1;
	else PressureGroup=0;
run;

proc freq data=storm_cat;
	tables PressureGroup;
run;

*Practicing LENGTH, Changing cases. It does matter where the LENGTH statement is- needs to be before if/else;
data storm_summary2;
	set pg1.storm_summary;
	*Add a LENGTH statement;
	LENGTH Ocean$8;
	keep Basin Season Name MaxWindMPH Ocean;
	*Add assignment statement;
	Basin=UPCASE(Basin);
	OceanCode=substr(Basin,2,1);
	if OceanCode="I" then Ocean="Indian";
	else if OceanCode="A" then Ocean="Atlantic";
	else Ocean="Pacific";
run;

*If/Then/Do Activity practice;
*Original code failed. Why did it fail? What do you need to do to fix it?;
data front rear;
    set sashelp.cars;
    if DriveTrain="Front" then do;
        DriveTrain="FWD";
        output front;
    end; *added;
    else if DriveTrain='Rear' then do;
        DriveTrain="RWD";
        output rear;
    end; *added;
run;

*Level 1 practice;
data park_type;
	set pg1.np_summary;
	*Add IF-THEN-ELSE statements;
	LENGTH ParkType$8;
	IF Type='NM' then ParkType='Monument';
	ELSE IF Type='NP' then ParkType = 'Park';
	ELSE IF Type ='NPRE' then ParkType = 'Preserve';
	ELSE IF Type ='PRE' then ParkType = 'Preserve';
	ELSE IF Type ='PRESERVE' then ParkType = 'Preserve';
	*Learned I can use else if Type IN ('NPRE', 'PRE', 'PRESERVE');
	ELSE IF Type ='NS' then ParkType = 'Seashore';
	ELSE IF Type ='RVR' then ParkType = 'River';
	ELSE IF Type ='RIVERWAYS' then ParkType = 'River';
run;

proc freq data=park_type;
	tables ParkType;
run;

*Level 2 practice;
data parks monuments;
	set pg1.np_summary;
	WHERE Type='NP' OR TYPE='NM';
	Campers=sum(OtherCamping, TentCampers, RVCampers, BackCountryCampers);
	if Type='NP' then do;
		ParkType='Park';
		output parks;
	end;
	else if Type='NM' then do;
		ParkType='Monument';
		output monuments;
	end;
	KEEP Reg ParkName DayVisits OtherLodging Campers ParkType;
RUN;

*Challenge level, select when;
data parks monuments;
	set pg1.np_summary;
	WHERE Type='NP' OR TYPE='NM';
	Campers=sum(OtherCamping, TentCampers, RVCampers, BackCountryCampers);
	LENGTH ParkType$8;
	select(Type);
		when('NP') do;
			ParkType='Park';
			output parks;
			end;
		otherwise do;
			ParkType='Monument';
			output monuments;
			end;
	end;
	KEEP Reg ParkName DayVisits OtherLodging Campers ParkType;
RUN;
